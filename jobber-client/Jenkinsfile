namespace = 'production'
serviceName = 'jobber-frontend'
service = 'Jobber Frontend'

def groovyMethods

m1 = System.currentTimeMillis()

pipeline {
  agent {
    label 'Jenkins-Agent'
  }

  tools {
    nodejs 'NodeJS'
    dockerTool 'Docker'
  }

  environment {
    DOCKER_CREDENTIALS = credentials('dockerhub')
    STRIPE_API_KEY = credentials('stripe-api-key')
    IMAGE_NAME = '<your-dockerhub-username>' + '/' + 'jobber-frontend'
    IMAGE_TAG = "stable-${BUILD_NUMBER}"
  }

  stages {
    stage('Cleanup Workspace') {
      steps {
        cleanWs()
      }
    }

    stage('Prepare Environment') {
      steps {
        sh '[ -d pipeline ] || mkdir pipeline'
        dir('pipeline') {
          git branch: 'main', credentialsId: 'github', url: 'https://github.com/hauxun/jenkins-automation'
          script {
            groovyMethods = load('functions.groovy')
          }
        }
        git branch: 'main', credentialsId: 'github', url: 'https://github.com/hauxun/jobber-frontend'
        sh """
          echo VITE_NODE_ENV=production > .env.production
          echo VITE_BASE_ENDPOINT=https://jobber.hauxun.com >> .env.production
          echo VITE_CLIENT_ENDPOINT=https://jobber.hauxun.info:3000 >> .env.production
          echo VITE_STRIPE_KEY=$STRIPE_API_KEY >> .env.production
          echo VITE_ELASTIC_APM_SERVER=https://36d86e4ab0ef4607a588213e5f7e2de3.apm.eu-central-1.aws.cloud.es.io:443 >> .env.production
          echo VITE_ELASTIC_APM_SERVER_TOKEN=2CPCeuEtOxU79OTC3k >> .env.production
          cat .env.production
        """
        sh 'npm install'
      }
    }

    stage('Lint Check') {
      steps {
        sh 'npm run lint:check'
      }
    }

    stage('Code Format Check') {
      steps {
        sh 'npm run prettier:check'
      }
    }

    stage('Build and Push') {
      steps {
        sh 'docker login -u $DOCKERHUB_CREDENTIAL_USR --password $DOCKERHUB_CREDENTIALS_PSW'
        sh "docker build -t $IMAGE_NAME ."
        sh "docker tag $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG"
        sh "docker tag $IMAGE_NAME $IMAGE_NAME:stable"
        sh "docker push $IMAGE_NAME:$IMAGE_TAG"
        sh "docker push $IMAGE_NAME:stable"
      }
    }

    stage('Clean Artifacts') {
      steps {
        sh "docker rmi $IMAGE_NAME:$IMAGE_TAG"
        sh "docker rmi $IMAGE_NAME:stable"
      }
    }

    stage('Create New Pods') {
      steps {
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'minikube', contextName: 'minikube', credentialsId: 'jenkins-k8s-token', namespace: '', serverUrl: 'https://192.168.105.6:8443']]) {
          script {
            def pods = groovyMethods.findPodsFromName("${namespace}", "${serviceName}")
            for (podName in pods) {
              sh """
                kubectl delete -n ${namespace} pod ${podName}
                sleep 10s
              """
            }
          }
        }
      }
    }
  }
  post {
    success {
      script {
        m2 = System.currentTimeMillis()
        def durTime = groovyMethods.durationTime(m1, m2)
        def author = groovyMethods.readCommitAuthor()
        groovyMethods.notifySlack('', 'jobber-jenkins', [
						[
							title: "BUILD SUCCEEDED: ${service} Service with build number ${env.BUILD_NUMBER}",
							title_link: "${env.BUILD_URL}",
							color: 'good',
							text: "Created by: ${author}",
							'mrkdwn_in': ['fields'],
							fields: [
								[
									title: 'Duration Time',
									value: "${durTime}",
									short: true
								],
								[
									title: 'Stage Name',
									value: 'Production',
									short: true
								],
							]
						]
					]
        )
      }
    }
    failure {
      script {
        m2 = System.currentTimeMillis()
        def durTime = groovyMethods.durationTime(m1, m2)
        def author = groovyMethods.readCommitAuthor()
        groovyMethods.notifySlack('', 'jobber-jenkins', [
						[
							title: "BUILD FAILED: ${service} Service with build number ${env.BUILD_NUMBER}",
							title_link: "${env.BUILD_URL}",
							color: 'error',
							text: "Created by: ${author}",
							'mrkdwn_in': ['fields'],
							fields: [
								[
									title: 'Duration Time',
									value: "${durTime}",
									short: true
								],
								[
									title: 'Stage Name',
									value: 'Production',
									short: true
								],
							]
						]
					]
        )
      }
    }
  }
}
